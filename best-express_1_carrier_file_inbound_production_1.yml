%dw 2.0
import * from dw::Runtime
output application/json


var payload_final = payload default [] map {
    externalId: lower(trim($[0])) default "",
    identifier1: $[1] default "",
    identifier2: $[2] default "",
    identifier3: $[3] default "",
    earliestAppointmentTime: $[5] default "",
    latestAppointmentTime: $[6] default ""
}

var p = payload_final distinctBy $

var csvBody = p default [] map (x, index) -> {
    
    externalId: lower(trim(x[0])) default "",
    identifier1: x[1] default "",
    identifier2: x[2] default "",
    identifier3: x[3] default "",
    earliestAppointmentTime: x[4] default "",
    latestAppointmentTime: x[5] default ""       
}


var plusSign = csvBody default [] groupBy ($.identifier1) pluck $$
var plusSign_1 = csvBody default [] groupBy ($.identifier1) pluck $

var csvBody_1 = plusSign default [] map (x, index) -> {
       "a": x as String default "",
      "b": sizeOf(plusSign_1[index]) 
      
 }
 
 
var payload_result = csvBody default [] map {
    externalId: lower(trim($[0])) default "",
    identifier1: $[1] default "",
    identifier2: $[2] default "",    
    identifier3: if (($[3] default "") == "99") (csvBody_1.b[((csvBody_1.a default [] find $[1])[0]) as Number default ""] default "" ) as String default "" else  $[3] as String default "",
    earliestAppointmentTime: $[4] default "",
    latestAppointmentTime: $[5] default ""
    //final: csvBody.b[indexOf(csvBody.a default [], $[2])] default ""
}
---
try(() -> payload_result) orElse payload_result

