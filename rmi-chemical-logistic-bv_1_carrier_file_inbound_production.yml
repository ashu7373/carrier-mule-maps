%dw 2.0

input payload application/xlsx
output application/json

import * from dw::core::Arrays
import * from dw::core::Objects
import * from dw::core::Strings
output application/json

//var dataSet = readUrl("classpath://test_631_3.xls", "application/xlsx")

var dataset = payload pluck $
var data = dataset[0] 

fun date_time_format(d: LocalDateTime {format: "M/d/yy H:mm"}) = d as String {format: "yyyy-MM-dd'T'HH:mm:ss.SSS"}

fun Date_Format(d: LocalDateTime {format: "yyyyMMdd'T'HHmmss"}) = d as String {format: "yyyy-MM-dd'T'HH:mm:ss.SSS"}
//fun Date_F ormat1(d:LocalDateTime {format: "yyyyMMdd'T'HHmmss"}) = d as String {format: "yyyy-MM-dd'T'HH:mm:ss.SSS"}


var plusSign = data default [] filter (($[3] default "" contains "/") or ($[3] default "" contains "+")) map ((load, loadIndex) -> {
		a: {
			externalId: trim(load[14]),
			//identifier2: load[3] ,


			identifier1: trim( ( load[3]  splitBy(/[+\/]/) )[0] ),


			(pickupTime: 
				if (! isEmpty((data default [] filter ($[3] == load[3] ) map {
						a: $[9]
					}.a )[0]) )
					date_time_format( (data default [] filter ($[3]  == load[3] ) map {
						a: $[9]
					}.a )[0] )
				else
					"") if ( isEmpty((data default [] filter ($[3]  == load[3] ) map {
								a: $[12]
							}.a)[0]) ),


							(estimatedArrivalAtDestination: 
				if (! isEmpty((data default [] filter ($[3] == load[3] ) map {
						a: $[9]
					}.a )[0]) )
					date_time_format( (data default [] filter ($[3]  == load[3] ) map {
						a: $[11]
					}.a )[0] )
				else
					"") if (! isEmpty((data default [] filter ($[3]  == load[3] ) map {
								a: $[11]
							}.a)[0]) ),


			(deliveryTime: 
				if (! isEmpty((data default [] filter ($[3]  == load[3] ) map {
						a: $[12]
					}.a )[0]) )
					date_time_format( (data default [] filter ($[3]  == load[3] ) map {
						a: $[12]
					}.a )[0] )
				else
					"")  if (! isEmpty((data default [] filter ($[3]  == load[3]) map {
								a: $[12]
							}.a)[0]) )
		},


		b: {

			externalId: trim(load[14]),
			//identifier2: load."Customer order reference",


			identifier1: trim( ( load[3] splitBy(/[+\/]/) )[1] ),
			

			(pickupTime: 
				if (! isEmpty((data default [] filter ($[3] == load[3]) map {
						a: $[9]	
					}.a )[1]) )
					date_time_format( (data default [] filter ($[3] == load[3]) map {
						a: $[9]	
					}.a )[1] )
				else
					"" ) 
					if ( isEmpty((data default [] filter ($[3] == load[3]) map {
								a: $[12]
							}.a)[1]) ),
			
			
							(estimatedArrivalAtDestination: 
				if (! isEmpty((data default [] filter ($[3] == load[3]) map {
						a: $[9]	
					}.a )[1]) )
					date_time_format( (data default [] filter ($[3] == load[3]) map {
						a: $[11]	
					}.a )[1] )
				else
					"") if (! isEmpty((data default [] filter ($[3] == load[3]) map {
								a: $[11]
							}.a)) ),


			 (deliveryTime: 
				if (! isEmpty((data default [] filter ($[3] == load[3]) map {
						a: $[12]
					}.a )[1]) )
					date_time_format( (data default [] filter ($[3] == load[3]) map {
						a: $[12]
					}.a )[1] )
				else
					"") if (! isEmpty((data default [] filter ($[3]	 == load[3]) map {
								a: $[12]
							}.a)[1]) )
		}
	}) distinctBy $
	
var additional_body = data default [] filter (($[3] default "" contains "/") or ($[3] default "" contains "+")) map ((load, loadIndex) -> {
		
	b: {

			(externalId: trim(load[14])) if ( isEmpty((data default [] filter ($[3] == load[3]) map {
								a: $[14]
							}.a)[1]) ),


			(identifier1: trim( ( load[3] splitBy(/[+\/]/) )[1] )) if ( isEmpty((data default [] filter ($[3] == load[3]) map {
								a: $[14]
							}.a)[1]) ),
			


			(pickupTime: 
				if (! isEmpty((data default [] filter ($[3] == load[3]) map {
						a: $[9]	
					}.a )[0]) )
					date_time_format( (data default [] filter ($[3] == load[3]) map {
						a: $[9]	
					}.a )[0] )
				else
					"" ) 
					if (( isEmpty((data default [] filter ($[3] == load[3]) map {
								a: $[14]
							}.a)[1]) ) and ( isEmpty((data default [] filter ($[3] == load[3]) map {
								a: $[12]
							}.a)[0]) )) ,
			
			

							(estimatedArrivalAtDestination: 
				if (! isEmpty((data default [] filter ($[3] == load[3]) map {
						a: $[9]	
					}.a )[0]) )
					date_time_format( (data default [] filter ($[3] == load[3]) map {
						a: $[11]	
					}.a )[0] )
				else
					"") if (( isEmpty((data default [] filter ($[3] == load[3]) map {
								a: $[14]
							}.a)[1]) ) and (! isEmpty((data default [] filter ($[3] == load[3]) map {
								a: $[11]
							}.a)[0]) )),


			 (deliveryTime: 
				if (! isEmpty((data default [] filter ($[3] == load[3]) map {
						a: $[12]
					}.a )[0]) )
					date_time_format( (data default [] filter ($[3] == load[3]) map {
						a: $[12]
					}.a )[0] )
				else
					"") if (( isEmpty((data default [] filter ($[3] == load[3]) map {
								a: $[14]
							}.a)[1]) ) and (! isEmpty((data default [] filter ($[3] == load[3]) map {
								a: $[12]
							}.a)[0]) ))
		}
	}) distinctBy $


	

var nonPlus = data default [] filter (! ($[3] default "" contains "/") and !($[3] default "" contains "+") ) map {
		externalId: trim($[14]),

		identifier1: $[3],

		(pickupTime: 
			if (! isEmpty($[9]) )
				date_time_format($[9])
			else 
				"") if ( isEmpty($[12]) ),

		(estimatedArrivalAtDestination: 
			if (! isEmpty($[11]) )
				date_time_format($[11])
			else
				"") if (! isEmpty($[11]) ),

		(deliveryTime: 
			if (! isEmpty($[12]) )
				date_time_format($[12])
			else
				"") if (! isEmpty($[12]) )
	}

var all_data_Set = (plusSign.a default [] filter $ != {} 

++

plusSign.b default [] filter $ != {} 

++

additional_body.b default [] filter $ != {} 

++

nonPlus default [] filter $ != {} )


var final = all_data_Set default [] filter ($.identifier1 default "" contains "-" ) map ((load, loadIndex) -> {
	a:{
		externalId: load.externalId,
		identifier1: trim( ( load.identifier1 splitBy(/[-]/) )[0]),
		(pickupTime: load.pickupTime default "") ,
		estimatedArrivalAtDestination: load.estimatedArrivalAtDestination default "",
		(deliveryTime: load.deliveryTime default "") if !(isEmpty(load.deliveryTime)) 
	},
	
	b:{
		externalId: load.externalId,
		identifier1: trim( ( load.identifier1 splitBy(/[-]/) )[1]),
		(pickupTime: load.pickupTime default "")  ,
		estimatedArrivalAtDestination: load.estimatedArrivalAtDestination default "",
		(deliveryTime: load.deliveryTime default "") if !(isEmpty(load.deliveryTime)) 
	}
	
}
	
)

var final_non_char = all_data_Set default [] filter (!($.identifier1 default "" contains "-")) map{
    externalId: $.externalId,
    identifier1: trim( $.identifier1),
	(pickupTime: $.pickupTime default "")  ,
    estimatedArrivalAtDestination: $.estimatedArrivalAtDestination default "",
    (deliveryTime: $.deliveryTime default "") if !(isEmpty($.deliveryTime)) 

} 

---


final.a default [] filter $ != {} 
++
final.b default [] filter $ != {} 
++
final_non_char default [] filter $ != {} 

